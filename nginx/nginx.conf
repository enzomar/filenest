worker_processes 1;

events {
    worker_connections 1024;
}

http {
    lua_shared_dict api_keys 1m;

    init_by_lua_block {
        local api_keys = ngx.shared.api_keys
        local api_key = os.getenv("API_KEY")
        if api_key then
            api_keys:set(api_key, true)
        else
            ngx.log(ngx.ERR, "API_KEY environment variable not set")
        end
    }

    include       mime.types;
    default_type  application/octet-stream;

    server {
        listen 80;

        # Serve frontend
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri /index.html;
        }

        # Serve static assets (css, js, etc)
        location /static/ {
            alias /usr/share/nginx/html/;
        }

        # Serve uploaded files with API key check
        location ^~ /files/ {
            access_by_lua_block {
                local args = ngx.req.get_uri_args()
                local key = args["api-key"]
                local api_keys = ngx.shared.api_keys

                if not key or not api_keys:get(key) then
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.say("403 Forbidden: Invalid API key")
                    return ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            }
            alias /app/storage/;
            autoindex on;
        }

        # Proxy API to backend service
        location /api/ {
            proxy_pass http://backend:8000/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
